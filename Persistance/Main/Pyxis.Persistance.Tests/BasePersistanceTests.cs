using System.IO;
using System.Linq;
using NUnit.Framework;
using Pyxis.Core.Id;
using Pyxis.Persistance.Container;

namespace Pyxis.Persistance.Tests
{
    public abstract class BasePersistanceTests
    {
        protected IPersistanceStore PersistanceStore;

        [Test]
        public void TestObjectCanBeStored()
        {
            var persistedObject = new PersistedString {Content = "content", Id = "Id"};
            PersistanceStore.Save(persistedObject);
            var saved = PersistanceStore.Get<PersistedString>("Id");
            Assert.IsNotNull(saved);
            Assert.AreEqual("Id", saved.Id);
            Assert.AreEqual("content", saved.Content);
        }

        [Test]
        public void TestNonSerializeObjectCanBeStored()
        {
            var persistedObject = new NonSerializable {Id="123", Wrapped = Directory.GetCurrentDirectory()};
            PersistanceStore.Save(persistedObject);
            var saved = PersistanceStore.Get<NonSerializable>("123");
            Assert.IsNotNull(saved);
            Assert.AreEqual("123", saved.Id);
            Assert.AreEqual(Directory.GetCurrentDirectory(), saved.Wrapped);
        }

        [Test]
        public void TestIdCanBeAutoGenerated()
        {
            var persistedObject = new PersistedString { Content = "content"};
            Assert.IsTrue(string.IsNullOrEmpty(persistedObject.Id));
            PersistanceStore.Save(persistedObject);
            Assert.IsFalse(string.IsNullOrEmpty(persistedObject.Id));
            var saved = PersistanceStore.Get<PersistedString>(persistedObject.Id); 
            Assert.IsNotNull(saved);
            Assert.AreEqual("content", saved.Content);
        }
        
        [Test]
        public void TestIdIsNotcaseSensitive()
        {
            var persistedObject = new PersistedString {Id="Id", Content = "content" };
            PersistanceStore.Save(persistedObject);
            var saved = PersistanceStore.Get<PersistedString>(persistedObject.Id);
            Assert.IsNotNull(saved);
            saved = PersistanceStore.Get<PersistedString>("iD");
            Assert.IsNotNull(saved);
        }

        [Test]
        public void TestNoIdIsNoOp()
        {
            var saved = PersistanceStore.Get<PersistedString>(null);
            Assert.IsNull(saved);
            saved = PersistanceStore.Get<PersistedString>("id",null);
            Assert.IsNull(saved);

        }
        [Test]
        public void TestObjectCanBeStoredAsBatch()
        {
            var persistedObject = new PersistedString { Content = "content", Id = "Id" };
            var persistedObject2 = new PersistedString { Content = "content2", Id = "Id2" };
            PersistanceStore.Save<PersistedString>(new [] {persistedObject, persistedObject2});
            var saved = PersistanceStore.Get<PersistedString>("Id");
            Assert.IsNotNull(saved);
            Assert.AreEqual("Id", saved.Id);
            Assert.AreEqual("content", saved.GetContent());

            saved = PersistanceStore.Get<PersistedString>("Id2");
            Assert.IsNotNull(saved);
            Assert.AreEqual("Id2", saved.Id);
            Assert.AreEqual("content2", saved.Content);
        }

        [Test]
        public void TestDifferentObjectTypeCanBeStored()
        {
            var persistedString = new PersistedString { Content = "content", Id = "Id" };
            var persistedObject = new PersistedObject{ Content = "content", Id = "Id" };
            PersistanceStore.Save(persistedObject);
            PersistanceStore.Save(persistedString);
            var saved = PersistanceStore.Get<PersistedString>("Id");
            Assert.IsNotNull(saved);
            Assert.AreEqual("Id", saved.Id);
            Assert.AreEqual("content", saved.Content);

            var saved2 = PersistanceStore.Get<PersistedObject>("Id");
            Assert.IsNotNull(saved2);
            Assert.AreEqual("Id", saved2.Id);
            Assert.AreEqual("content", saved2.Content);
        }

        [Test]
        public void TestSavingAnExistingObjectReplacesIt()
        {
            var persistedObject = new PersistedObject { Content = "content", Id = "Id" };
            PersistanceStore.Save(persistedObject);
            persistedObject.Content = "new";
            PersistanceStore.Save(persistedObject);
            var saved = PersistanceStore.Get<PersistedObject>("Id");
            Assert.AreEqual("new", saved.Content);
        }

        [Test]
        public void TestNonExistingObjectReturnsNull()
        {
            var persistedObject = new PersistedObject { Content = "content", Id = "Id" };
            PersistanceStore.Save(persistedObject);
            Assert.IsNull(PersistanceStore.Get<PersistedObject>("Id2"));
        }
    
        [Test]
        public void TestNonExistingObjectTypeReturnsNullOnGet()
        {
            var persistedObject = new PersistedObject { Content = "content", Id = "Id" };
            PersistanceStore.Save(persistedObject);
            Assert.IsNull(PersistanceStore.Get<PersistedString>("Id"));
        }

        [Test]
        public void TestAllObjectsCanBeRetrievedAtOnce()
        {
            var persistedObject = new PersistedString { Content = "content", Id = "Id" };
            var persistedObject2 = new PersistedString { Content = "content2", Id = "Id2" };
            PersistanceStore.Save<PersistedString>(new[] { persistedObject, persistedObject2 });
            var saved = PersistanceStore.GetAll<PersistedString>().ToArray();
            Assert.AreEqual(2, saved.Count());
            Assert.IsTrue(saved.Any(x=> x.Id == "Id" && Equals(x.Content, "content")));
            Assert.IsTrue(saved.Any(x => x.Id == "Id" && Equals(x.GetContent<string>(), "content")));
            Assert.IsTrue(saved.Any(x => x.Id == "Id2" && Equals(x.Content, "content2")));
            Assert.IsTrue(saved.Any(x => x.Id == "Id2" && Equals(x.GetContent<string>(), "content2")));
        }

        [Test]
        public void TestObjectsCanBeStoredInDifferentContexts()
        {
            var defaultContext = new PersistedString { Content = "context1", Id = "Id" };
            var context2 = new PersistedString { Content = "context2", Id = "Id" };
            PersistanceStore.Save(defaultContext);
            PersistanceStore.Save(context2,"context2");

            var defaultContextValue = PersistanceStore.Get<PersistedString>("Id");
            var context2Value = PersistanceStore.Get<PersistedString>("Id", "context2");
            Assert.IsNotNull(defaultContextValue);
            Assert.IsNotNull(context2Value);
            Assert.AreNotSame(defaultContextValue, context2Value);
            Assert.AreEqual("context1", defaultContextValue.GetContent());
            Assert.AreEqual("context2", context2Value.GetContent());
        }

        [Test]
        public void TestContextNameIsNotCaseSensitive()
        {
            var defaultContext = new PersistedString { Content = "context1", Id = "Id" };
            PersistanceStore.Save(defaultContext, "context");
            var contextValue = PersistanceStore.Get<PersistedString>("Id", "ConText");
            Assert.IsNotNull(contextValue);
            Assert.AreEqual("context1", contextValue.GetContent());
        }

        [Test]
        public void TestObjectsCanBeDeleted()
        {
            var persistedObject = new PersistedString { Content = "content", Id = "Id" };
            PersistanceStore.Save(persistedObject);
            var saved = PersistanceStore.Get<PersistedString>("Id");
            Assert.IsNotNull(saved);
            PersistanceStore.Delete<PersistedString>("Id");
            saved = PersistanceStore.Get<PersistedString>("Id");
            Assert.IsNull(saved);
        }

        [Test]
        public void TestObjectsExistanceCanBeVerified()
        {
            var persistedObject = new PersistedString { Content = "content", Id = "Id" };
            var exist = PersistanceStore.Any<PersistedString>();
            Assert.IsFalse(exist);
            PersistanceStore.Save(persistedObject);
            exist = PersistanceStore.Any<PersistedString>();
            Assert.IsTrue(exist);
        }

        [Test]
        public void TestLimitedObjectsSetCanBeRetrieved()
        {
            var persistedObjects = new []
            {
                new PersistedString {Content = "content", Id = "Id"},
                new PersistedString {Content = "content2", Id = "Id2"},
                new PersistedString {Content = "content3", Id = "Id3"}
            };
            PersistanceStore.Save<PersistedString>(persistedObjects);
            var retrived = PersistanceStore.GetSome<PersistedString>(2);
            Assert.AreEqual(2, retrived.Count());
            retrived = PersistanceStore.GetSome<PersistedString>(20);
            Assert.AreEqual(3, retrived.Count());
        }
        [Test]
        public void TestContextCanBePurgedForType()
        {
            var persistedString = new[]
            {
                new PersistedString {Content = "content", Id = "Id"},
                new PersistedString {Content = "content2", Id = "Id2"},
            };
            var persistedObjects = new[]
            {
                new PersistedObject {Content = "content", Id = "Id"},
                new PersistedObject {Content = "content2", Id = "Id2"},
            };

            PersistanceStore.Save<PersistedObject>(persistedObjects);
            PersistanceStore.Save<PersistedObject>(persistedObjects, "unsafe");
            PersistanceStore.Save<PersistedString>(persistedString);
            PersistanceStore.Save<PersistedString>(persistedString, "unsafe");
            var retrived = PersistanceStore.GetAll<PersistedString>("unsafe");
            Assert.AreEqual(2, retrived.Count());
            var retrived2 = PersistanceStore.GetAll<PersistedObject>("unsafe");
            Assert.AreEqual(2, retrived2.Count());

            PersistanceStore.Purge<PersistedObject>("unsafe");
            retrived = PersistanceStore.GetAll<PersistedString>("unsafe");
            Assert.AreEqual(2, retrived.Count());
            retrived2 = PersistanceStore.GetAll<PersistedObject>("unsafe");
            Assert.AreEqual(0, retrived2.Count());
            retrived = PersistanceStore.GetAll<PersistedString>();
            Assert.AreEqual(2, retrived.Count());
            retrived2 = PersistanceStore.GetAll<PersistedObject>();
            Assert.AreEqual(2, retrived2.Count());
            PersistanceStore.Purge<PersistedString>();
            retrived = PersistanceStore.GetAll<PersistedString>();
            Assert.AreEqual(0, retrived.Count());
            retrived2 = PersistanceStore.GetAll<PersistedObject>();
            Assert.AreEqual(2, retrived2.Count());

            // No-op
            PersistanceStore.Purge();
            PersistanceStore.Purge<PersistedString>();
            PersistanceStore.Purge<PersistedObject>("unsafe");
        }

        [Test]
        public void TestContextCanBePurged()
        {
            var persistedString = new[]
            {
                new PersistedString {Content = "content", Id = "Id"},
                new PersistedString {Content = "content2", Id = "Id2"},
            };
            var persistedObjects = new[]
            {
                new PersistedObject {Content = "content", Id = "Id"},
                new PersistedObject {Content = "content2", Id = "Id2"},
            };
            
            PersistanceStore.Save<PersistedObject>(persistedObjects);
            PersistanceStore.Save<PersistedObject>(persistedObjects, "unsafe");
            PersistanceStore.Save<PersistedString>(persistedString);
            PersistanceStore.Save<PersistedString>(persistedString, "unsafe");
            var retrived = PersistanceStore.GetAll<PersistedString>("unsafe");
            Assert.AreEqual(2, retrived.Count());
            var retrived2 = PersistanceStore.GetAll<PersistedObject>("unsafe");
            Assert.AreEqual(2, retrived2.Count());

            PersistanceStore.Purge("unsafe");
            retrived = PersistanceStore.GetAll<PersistedString>("unsafe");
            Assert.AreEqual(0, retrived.Count());
            retrived2 = PersistanceStore.GetAll<PersistedObject>("unsafe");
            Assert.AreEqual(0, retrived2.Count());
            retrived = PersistanceStore.GetAll<PersistedString>();
            Assert.AreEqual(2, retrived.Count());
            retrived2 = PersistanceStore.GetAll<PersistedObject>();
            Assert.AreEqual(2, retrived2.Count());
            PersistanceStore.Purge();
            retrived = PersistanceStore.GetAll<PersistedString>();
            Assert.AreEqual(0, retrived.Count());
            retrived2 = PersistanceStore.GetAll<PersistedObject>();
            Assert.AreEqual(0, retrived2.Count());
            
            // No-op
            PersistanceStore.Purge();
        }

    }

    class NonSerializable : IIdentifiable
    {
        public string Id { get; set; }
        public object Wrapped { get; set; }
    }
}
